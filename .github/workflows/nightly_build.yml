name: Nightly Build

on:
  schedule:
    # Run every day at 1am PST (9am UTC)
    - cron: '0 9 * * *'

jobs:
  linux:
    name: Build and Upload Nightly Release Assets (Linux)
    timeout-minutes: 90
    runs-on: ubuntu-20.04
    steps:
      - name: Create cache file
        run: |
          mkdir check-SHA
          echo ${{ github.sha }} > github-sha.txt

      - name: Check SHA
        id: check_sha
        uses: actions/cache@v1
        with:
          path: check-SHA
          key: check-SHA-${{ github.sha }}

      - name: Print environment
        if: steps.check_sha.outputs.cache-hit != 'true'
        run: |
          echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
          echo "GITHUB_RUN_ID=$GITHUB_RUN_ID"
          echo "GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER"
          echo "GITHUB_JOB=$GITHUB_JOB"
          echo "GITHUB_ACTION=$GITHUB_ACTION"

      - name: Install system packages
        if: steps.check_sha.outputs.cache-hit != 'true'
        run: sudo apt-get install -y help2man gzip libusb-1.0-0-dev musl-tools

      - name: Checkout sources
        if: steps.check_sha.outputs.cache-hit != 'true'
        uses: actions/checkout@v2

      - name: Find needed nightly toolchain version
        if: steps.check_sha.outputs.cache-hit != 'true'
        id: rust_nightly_version
        run: |
          OUT=$(cat modality-probe-capi/rust-toolchain)
          echo "$OUT"
          echo "##[set-output name=toolchain;]$OUT"

      - name: Install needed nightly toolchain
        if: steps.check_sha.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt, clippy, llvm-tools-preview
          toolchain: ${{ steps.rust_nightly_version.outputs.toolchain }}
          override: true

      - name: Install stable rust toolchain
        if: steps.check_sha.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt, clippy, llvm-tools-preview
          toolchain: stable
          override: true

      - name: Install musl toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true

      - name: Install cross
        if: steps.check_sha.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cross

      - name: Print tool versions
        if: steps.check_sha.outputs.cache-hit != 'true'
        run: |
          echo `rustup default`
          echo `which rustc`
          echo `which cargo`
          echo `which cargo-clippy`
          echo `which cargo-fmt`
          echo `rustc --version`
          echo `cargo --version`
          echo `cargo-clippy --version`
          echo `cargo-fmt --version`

      - name: Fetch dependencies
        if: steps.check_sha.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: fetch

      - name: Build package
        if: steps.check_sha.outputs.cache-hit != 'true'
        run: |
          cd package/tarball/
          ./build.sh

      - name: Prepare artifacts
        if: steps.check_sha.outputs.cache-hit != 'true'
        run: |
          ls -l target/package/tarball/
          TARBALL_NAME=modality-probe_$(cat VERSION)+${GITHUB_RUN_NUMBER}.tar.gz
          TARBALL_PATH=target/package/tarball/${TARBALL_NAME}
          echo TARBALL_NAME=${TARBALL_NAME} >> $GITHUB_ENV
          echo TARBALL_PATH=${TARBALL_PATH} >> $GITHUB_ENV

      - name: Upload release tarball
        if: steps.check_sha.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.TARBALL_NAME }}
          path: ${{ env.TARBALL_PATH }}
          retention-days: 5
